package de.openflorian.crypt;

import java.security.GeneralSecurityException;
import java.security.SecureRandom;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

import org.apache.commons.codec.binary.Base64;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Crypt Cipher Key Generator
 * 
 * @author Bastian Kraus <me@bastian-kraus.me>
 */
public class CipherKeyGenerator {

	private static Logger log = LoggerFactory.getLogger(CipherKeyGenerator.class);
	
	/**
	 * Generate Cipher Secret<br/>
	 * <br/>
	 * Secret is generated by Blowfish {@link KeyGenerator} and a system default {@link SecureRandom} provider
	 * and Base64 encoded afterwards.
	 * 
	 * @return Base64 encoded {@link SecureRandom} generated encryption key
	 * @throws GeneralSecurityException 
	 */
	public static String generateKey() throws GeneralSecurityException {
		try {
			KeyGenerator gen = KeyGenerator.getInstance("Blowfish");
			gen.init(192, new SecureRandom());
			SecretKey key = gen.generateKey();
			
			return new Base64(true).encodeToString(key.getEncoded()).trim();
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new GeneralSecurityException(e.getMessage(), e);
		}
	}
	
}
